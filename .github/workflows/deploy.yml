name: Deploy to Production

on:
  push:
    branches:
      - main
  workflow_dispatch: # Allow manual triggers

env:
  NODE_VERSION: '20'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: |
            app/package-lock.json
            marketing/package-lock.json

      # Build API
      - name: Install API dependencies
        working-directory: ./app
        run: npm ci --production

      - name: Generate Prisma Client
        working-directory: ./app
        run: npx prisma generate

      # Build Marketing Site
      - name: Install Marketing dependencies
        working-directory: ./marketing
        run: npm ci

      - name: Build Marketing site
        working-directory: ./marketing
        run: npm run build
        env:
          NODE_ENV: production

      # Prepare deployment package
      - name: Prepare deployment artifacts
        run: |
          # Create deployment directory
          mkdir -p deploy-package
          
          # Copy API files (excluding node_modules)
          rsync -av --exclude='node_modules' \
                    --exclude='.env' \
                    --exclude='*.log' \
                    app/ deploy-package/app/
          
          # Copy only production dependencies for API
          cd app
          npm ci --production --prefix ../deploy-package/app
          cd ..
          
          # Copy Prisma files for migrations
          cp -r app/prisma deploy-package/app/
          
          # Copy Marketing built files
          mkdir -p deploy-package/marketing
          
          # Check if standalone build exists (from next.config.mjs output: 'standalone')
          if [ -d "marketing/.next/standalone" ]; then
            echo "Copying Next.js standalone build..."
            cp -r marketing/.next/standalone/* deploy-package/marketing/
            # Copy static files separately for standalone
            mkdir -p deploy-package/marketing/.next
            cp -r marketing/.next/static deploy-package/marketing/.next/
            cp -r marketing/public deploy-package/marketing/ 2>/dev/null || true
          else
            echo "Copying standard Next.js build with dependencies..."
            cp -r marketing/.next deploy-package/marketing/
            cp -r marketing/public deploy-package/marketing/ 2>/dev/null || true
            cp marketing/package*.json deploy-package/marketing/
            # Install production dependencies for marketing
            cd marketing
            npm ci --production --prefix ../deploy-package/marketing
            cd ..
          fi
          
          # Copy deployment script
          cp scripts/deploy-remote.sh deploy-package/ 2>/dev/null || true

      # Setup SSH
      - name: Setup SSH Key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.DO_SSH_KEY }}" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          ssh-keyscan -H ${{ secrets.DO_HOST }} >> ~/.ssh/known_hosts

      # Deploy to server
      - name: Deploy to Digital Ocean
        run: |
          # Create tar archive of deployment package
          echo "Creating deployment archive..."
          tar -czf deploy-package.tar.gz deploy-package/
          
          # Show archive size for debugging
          ls -lh deploy-package.tar.gz
          
          # Transfer the single compressed file to server
          echo "Transferring deployment archive to server..."
          scp -i ~/.ssh/deploy_key deploy-package.tar.gz \
              ${{ secrets.DO_USER }}@${{ secrets.DO_HOST }}:/home/trivia/
          
          # Extract and deploy on server
          echo "Extracting and deploying on server..."
          ssh -i ~/.ssh/deploy_key ${{ secrets.DO_USER }}@${{ secrets.DO_HOST }} \
            "cd /home/trivia && \
             rm -rf trivia-engine-deploy && \
             tar -xzf deploy-package.tar.gz && \
             cd deploy-package && \
             export DATABASE_URL='${{ secrets.DATABASE_URL }}' && \
             export JWT_SECRET='${{ secrets.JWT_SECRET }}' && \
             export PORT=3003 && \
             bash deploy-remote.sh && \
             cd .. && \
             rm -f deploy-package.tar.gz"

      # Run database migrations
      - name: Run database migrations
        run: |
          ssh -i ~/.ssh/deploy_key ${{ secrets.DO_USER }}@${{ secrets.DO_HOST }} \
            "cd /home/trivia/trivia-engine/app && \
             export DATABASE_URL='${{ secrets.DATABASE_URL }}' && \
             npx prisma migrate deploy"

      # Restart services
      - name: Restart PM2 services
        run: |
          ssh -i ~/.ssh/deploy_key ${{ secrets.DO_USER }}@${{ secrets.DO_HOST }} \
            "pm2 restart api marketing && pm2 save"

      # Health check
      - name: Health check
        run: |
          sleep 10
          # Check API health
          curl -f https://api.trivia-engine.com/health || exit 1
          # Check marketing site
          curl -f https://trivia-engine.com || exit 1

      # Cleanup
      - name: Cleanup SSH
        if: always()
        run: rm -f ~/.ssh/deploy_key

  notify:
    needs: build-and-deploy
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Notify deployment status
        run: |
          if [ "${{ needs.build-and-deploy.result }}" == "success" ]; then
            echo "✅ Deployment successful!"
          else
            echo "❌ Deployment failed!"
          fi